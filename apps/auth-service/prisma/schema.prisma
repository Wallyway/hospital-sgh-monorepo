// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://wally:wally@localhost:5432/usuarios?schema=usuarios"
}

model User {
  idUser             Int                 @id //TODO: Cambiar por cedula
  name               String              @db.VarChar(100)
  email              String              @unique //TODO: Unique no es necesario
  passwordHash       String // Almacena la contraseña hasheada con bcryptjs
  gender             String
  address            String              @db.VarChar(100)
  birthDate          DateTime
  telUser            TelUser[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  passwordResetToken PasswordResetToken? @relation(name: "UserPasswordResetToken")
}

model TelUser {
  idUser    Int
  telephone BigInt
  user      User     @relation(fields: [idUser], references: [idUser], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([idUser, telephone])
  @@map("TelUser")
}

// enum UserRole {
//   PATIENT
//   DOCTOR
//   ADMIN
// }

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique // El token de un solo uso
  userId    Int      @unique // ID del usuario asociado, @unique asegura solo un token activo por usuario
  expiresAt DateTime // Fecha de expiración del token
  createdAt DateTime @default(now())
  user      User     @relation(name: "UserPasswordResetToken", fields: [userId], references: [idUser], onDelete: Cascade)
}
